#This YML assumes that you have an enviroment and depencies already installed to facilitate running and building dotNET under FreeBSD
#Unlike a crossbuild that can use Microsoft's Docker containers, native builds can not.
#Testing is only supported natively and we don't have access to the "Helix" system that Microsoft uses for its officially supported platforms
#https://github.com/dotnet/runtime/blob/main/docs/workflow/requirements/freebsd-requirements.md
#and yes templating with more variables would look nicer but I am lazier
parameters:
- name: targetOS
  displayName: ARCH-OSNAME of arch+os to use
  type: string
  default: amd64-freebsd
  values:
    - amd64-freebsd
    - arm64-freebsd
- name: targetOSVersion
  displayName: OS Version
  type: string
  default: 13
  values:
    - 13
    - 14
- name: buildType
  displayName: Type of build (Release/Debug)
  type: string
  default: Release
  values:
    - Release
    - Debug
- name: runtimeName
  displayName: Name for build (info only)
  type: string
  default: 9.0.0-main
- name: bootstrapRepo
  displayName: Repo to download bootstrap packages
  type: string
  default: Thefrank/dotnet-freebsd-crossbuild
- name: runTests
  displayName: Tests to Run
  type: string
  default: complete
  values:
    - none
    - simple
    - complete
- name: publishArtifacts
  displayName: Publish Output to Pipeline
  type: boolean
  default: false
- name: cleanRepo
  displayName: Clean repo on success
  type: boolean
  default: true
- name: extraParameters
  displayName: Extra parameters to pass to build (e.g.,/p:PublishReadyToRun=false)
  type: string
  default: ' '

trigger: none

#schedules:
#- cron: "0 0 * * *"
#  displayName: Daily midnight build
#  branches:
#    include:
#    - main

pool:
  name: Default
  demands:
  - agent.os -equals FreeBSD
  - agent.name -equals 133build

#runtime is where we download the source to build
#crossbuild is where this downloads all patches it uses
resources:
  repositories:
  - repository: runtime
    type: github
    endpoint: Thefrank
    name: dotnet/runtime
    ref: main
  - repository: crossbuild
    type: github
    endpoint: Thefrank
    name: Thefrank/dotnet-freebsd-crossbuild
    ref: main
  

variables:
- name: runCounter 
  value: $[counter('runNumber', 1)]
- name: sdkTag
  value: 
- name: sdkName
  value:
- name: OSARCH 
  value: ${{ replace(split(parameters.targetOS, '-')[0],'amd64','x64') }}

stages:
  - stage: Setup
    dependsOn: []
    jobs:
      - job: init
        timeoutInMinutes: 30
        workspace:
          clean: all
        steps:
        - bash: |
            TAG=${{ parameters.runtimeName }}
            echo "##vso[build.updatebuildnumber]${TAG/\//-}-${{ parameters.targetOS }}-${{ parameters.targetOSVersion }}-run-${RUNCOUNTER}"
            echo "Building ${{ parameters.runtimeName }}-${{ parameters.targetOS }}-${{ parameters.targetOSVersion }}"
          displayName: Set Build Name
#Timeout at 240min because tests can hang
  - stage: runtime
    dependsOn: [Setup]
    jobs:
      - job: runtime
        timeoutInMinutes: 240
        workspace:
          clean: outputs
        steps:
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: |
               set -e
               echo "Checking for ASLR."
               if [ `sysctl -n kern.elf64.aslr.enable` -ne 0 ]; then
                echo "ASLR is enabled. This may cause problems."
               fi
            displayName: Check for ASLR
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: |
               set -e
               echo "##vso[task.setvariable variable=sdkName]$(curl -s https://raw.githubusercontent.com/dotnet/runtime/main/global.json | jq -r '.[] | select(.rollForward=="major") | .version')"
            displayName: Determine SDK
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: |
               set -e
               echo "##vso[task.setvariable variable=sdkTag]v$(sdkName)-${{ parameters.targetOS }}-${{ parameters.targetOSVersion }}"
            displayName: Update sdkTag
          - task: DownloadGitHubRelease@0
            inputs:
              connection: 'Thefrank'
              userRepository: '${{ parameters.bootstrapRepo }}'
              defaultVersionType: 'specificTag'
              version: '$(sdkTag)'
              itemPattern: '**freebsd**'
              downloadPath: '$(Build.ArtifactStagingDirectory)'
            displayName: Download bootstrap SDK and NuGet
          - checkout: self
          - checkout: runtime
          - checkout: crossbuild
#patches are for: removing internal-use-only Microsoft feeds. Build using livehost.
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: |
               set -e
               sed -i.ORI '/\/dnceng\/internal\//d' runtime/NuGet.config
               fetch https://patch-diff.githubusercontent.com/raw/dotnet/runtime/pull/105004.diff
               patch -d runtime -p 1 < 105004.diff
            displayName: Patch runtime
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: |
              set -e
              freebsd-dotnet-runtime-nightly/bsd_dotnet_install.sh $(Build.ArtifactStagingDirectory)/dotnet-sdk-$(SDKNAME)-freebsd-$(OSARCH).tar.gz runtime
              runtime/.dotnet/dotnet nuget add source $(Build.ArtifactStagingDirectory) --name "local" --configfile runtime/NuGet.config
            displayName: Install bootstrap SDK and NuGet
#No tests: This just builds all legs currently supported by runtime under freebsd-x64
#Failures here mean something is wrong and needs investigation
          - task: Bash@3
            condition: eq('${{ parameters.runTests }}', 'none')
            inputs:
             targetType: 'inline'
             script: |
              set -e
              runtime/build.sh /p:OfficialBuildId=$(date +%Y%m%d)-99 -ci -c ${{ parameters.buildType }} -subset Clr+Mono+Host.Native+Host.Tools+Host.Pkg+Libs+Packs -bl:$(Build.SourcesDirectory)/runtime/artifacts/log/BuildStep.binlog ${{ parameters.extraParameters }}
            continueOnError: false
            displayName: Build Runtime No Tests
#Simple tests: This is done in two steps: build everything from 'none'+tests then run tests. 
#These are more of "does it build" than "does it work correctly" ("smoke tests")
#Failures here are rare and usually mean the SDK(s) used need updates
          - task: Bash@3
            condition: eq('${{ parameters.runTests }}', 'simple')
            inputs:
             targetType: 'inline'
             script: |
              set -e
              mkdir $(Build.ArtifactStagingDirectory)/TestResults/
              runtime/build.sh /p:OfficialBuildId=$(date +%Y%m%d)-99 -ci -c ${{ parameters.buildType }} -subset Clr+Mono+Host.Native+Host.Tools+Host.Pkg+Libs+Libs.Tests+Packs -bl:$(Build.SourcesDirectory)/runtime/artifacts/log/BuildStep.binlog ${{ parameters.extraParameters }}
              runtime/build.sh /p:OfficialBuildId=$(date +%Y%m%d)-99 -ci -c ${{ parameters.buildType }} --test --testnobuild -bl:$(Build.SourcesDirectory)/runtime/artifacts/log/TestStep.binlog
            continueOnError: true
            displayName: Build Runtime Run Simple Tests
#Complete tests: Builds everything support and all supported tests. Runs all supported tests
#Failures here are typically test failure
          - task: Bash@3
            condition: eq('${{ parameters.runTests }}', 'complete')
            inputs:
             targetType: 'inline'
             script: |
              set -e
              mkdir $(Build.ArtifactStagingDirectory)/TestResults/
              runtime/build.sh /p:OfficialBuildId=$(date +%Y%m%d)-99 -ci -c ${{ parameters.buildType }} -subset Clr+Mono+Host.Native+Host.Tools+Host.Pkg+Libs+Libs.Tests+Packs --test -bl:$(Build.SourcesDirectory)/runtime/artifacts/log/CombinedStep.binlog ${{ parameters.extraParameters }}
            continueOnError: true
            displayName: Build Runtime Run Complete Tests
          - task: PublishPipelineArtifact@1
            condition: eq('${{ parameters.publishArtifacts }}', 'true')
            inputs:
              targetPath: '$(Build.SourcesDirectory)/runtime/artifacts/packages/${{ parameters.buildType }}/Shipping'
              artifact: 'RuntimePackages-$(runCounter)'
              publishLocation: 'pipeline'
            displayName: Publish Runtime Artifacts
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(Build.SourcesDirectory)/runtime/artifacts/log'
              artifact: 'RuntimeLogs-$(runCounter)-Build_Attempt$(System.JobAttempt)'
              publishLocation: 'pipeline'
            displayName: Publish Build Logs 
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'XUnit'
              testResultsFiles: '**/testResults.xml'
              searchFolder: '$(Build.SourcesDirectory)/runtime/artifacts/bin'
              testRunTitle: 'Runtime Test Results'
              buildPlatform: 'FreeBSD 13.3'
              buildConfiguration: 'AMD64'
            displayName: Publish XUnit Tests
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*Tests*.trx'
              searchFolder: '$(Build.SourcesDirectory)/runtime/artifacts/TestResults/Release/'
              testRunTitle: 'Runtime Test Results'
              buildPlatform: 'FreeBSD 13.3'
              buildConfiguration: 'AMD64'
            displayName: Publish VSTest Tests
          - task: Bash@3
            condition: and (eq('${{ parameters.cleanRepo }}', 'true'), in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'))
            inputs:
              targetType: 'inline'
              script: |
                git -C '$(System.StageDisplayName)' clean -ffdx
            displayName: Clean Up $(System.StageDisplayName)